======================
Org Roam Tutorial EP 1
======================

    :Author: revolt
    :Date: <2021-08-15 Sun>

.. contents::



1 Org Roam
----------

1.1 Org Roam简介
~~~~~~~~~~~~~~~~

Org-roam 具有以下优势:

- 隐私和安全:你的个人 wiki 只属于您,完全离线并在您的控制之下.使用GPG
  加密您的笔记.

- 纯文本的持久性: 与 Roam Research等Web 解决方案不同，笔记首先是纯
  Org-mode 文件——Org-roam 只是构建了一个辅助数据库，赋予个人 wiki 超能
  力。以纯文本形式记录笔记对于维基的寿命至关重要。永远不必担心专有网络
  解决方案被取消。即使 Org-roam 不复存在，这些笔记仍然有效。

- 免费和开源:Org-roam 是免费和开源的，这意味着如果您对 Org-roam 的任
  何部分感到不满意，您可以选择扩展 Org-roam，或打开拉取请求。

- 利用 Org-mode 生态系统:几十年来，Emacs 和 Org-mode 已经发展成为一个
  成熟的纯文本组织系统。基于 Org-mode 的构建已经使 Org-roam 领先于许多
  其他解决方案。

- 建立在 Emacs 之上: Emacs 也是一个很棒的文本编辑界面，Org-roam 继承
  了 Emacs 可用的许多强大的文本导航和编辑包。

1.2 抽屉-盒 模型理论
~~~~~~~~~~~~~~~~~~~~

主要是强调连接思想,用于建立思想网络.

这种方法归功于德国社会学家尼克拉斯·卢曼 (Niklas Luhmann)，他使用这种方
法制作了大量书面作品。Luhmann 的纸盒只是一盒卡片。这些卡片很小——通常只
能容纳一个概念。大小限制鼓励将想法分解为单独的概念。这些想法被明确地联
系在一起。想法的分解鼓励对想法的切向探索，增加思考的表面。在笔记之间建
立明确的联系也鼓励人们思考概念之间的联系。

在每个音符的角落，Luhmann 为每个音符分配了一个有序的 ID，让他可以在音
符之间进行链接和跳转。在 Org-roam 中，我们简单地使用超链接。

Org-roam 是一种在 Org 模式下数字化的滑动盒。每个 zettel(卡片)都是纯
文本的 Org 模式文件。与维护纸质卡片盒的方式相同，Org-roam 可以轻松创建
新的 zettels，使用强大的模板系统预填充样板内容。

1.3 转瞬即逝的笔记
~~~~~~~~~~~~~~~~~~

纸盒需要一种快速捕捉想法的方法。这些被称为转瞬即逝的笔记:它们是对需要
稍后处理或丢弃的信息或想法的简单提醒。这通常是使用 org-capture(参见
(org Capture)或使用 Org-roam 的每日笔记功能(参见Org-roam 日报)来完
成的。这提供了一个用于收集想法的中央收件箱，稍后将其处理为永久笔记。

1.4 永久笔记
~~~~~~~~~~~~

永久笔记进一步分为两类:文献笔记和 概念笔记。文献注释可以是对特定来源
(例如书籍、网站或论文)的简短注释，您希望稍后访问。概念笔记在创作时需
要更加小心:它们需要不言自明和详细。Org-roam 的模板系统支持添加不同的
模板以方便创建这些笔记。

如需进一步阅读 Zettelkasten 方法，Sonke Ahrens 的“如何聪明的做笔记”是
一本不错的指南,这本书我就看过几章。

1.5 安装
~~~~~~~~

1.5.1 基础配置
^^^^^^^^^^^^^^

.. code:: elisp

    ;; Org and Org-roam

    ;;; Tell Emacs where sqlite3.exe is stored
    (add-to-list 'load-path "D:\\sqlite")

    ;;; Tell Emacs to start org-roam-mode when Emacs starts
    (add-hook 'after-init-hook 'org-roam-mode)

    ;;; Define key bindings for Org-roam
    (global-set-key (kbd "C-c n r") #'org-roam-buffer-toggle-display)
    (global-set-key (kbd "C-c n i") #'org-roam-insert)
    (global-set-key (kbd "C-c n f") #'org-roam-find-file)
    (global-set-key (kbd "C-c n b") #'org-roam-switch-to-buffer)
    (global-set-key (kbd "C-c n d") #'org-roam-find-directory)
    (global-set-key (kbd "C-c n c") #'org-roam-db-build-cache)
    (global-set-key (kbd "C-c n u") #'org-roam-buffer-update)
    (global-set-key (kbd "C-c n x") #'org-roam-db-clear)

    ;;; Recommendation for Windows users for performance
    ;;; https://github.com/org-roam/org-roam/issues/1289#issuecomment-744046148
    (setq org-roam-db-update-method 'immediate)

    ;;; Let's also assign C-z to undo here
    (global-set-key (kbd "C-z") 'undo) ;Emacs default is bound to hide Emacs.

1.5.1.1 设置Org Roam存储位置
::::::::::::::::::::::::::::

.. code:: elisp

    ;; file-directory-p
    ;;(make-directory "~/.emacs.d/org-roam")

    ;;; 存储Org Roam文件
    (setq org-roam-directory "~/.emacs.d/org-roam/")

1.5.1.2 即时更新数据库
::::::::::::::::::::::

.. code:: elisp

    ;;; Recommendation for Windows users for performance
    ;;; https://github.com/org-roam/org-roam/issues/1289#issuecomment-744046148
    (setq org-roam-db-update-method 'immediate)

1.6 入门
~~~~~~~~

1.6.1 Org-roam 节点
^^^^^^^^^^^^^^^^^^^

我们首先从我们将在整个手册中使用的一些术语开始。我们将 Org-roam 中的基
本名称称为节点。我们定义一个节点如下:

节点是具有 ID 的任何标题或顶级文件.

.. code:: org

    :PROPERTIES:
    :ID:       foo
    :END:
    #+title: Foo

    * Bar
      :PROPERTIES:
      :ID:       bar
      :END:

我们创建了2个节点:

- ID为foo的文件节点 ``foo``

- 带有ID为bar的标题节点 ``Bar``.

  没有 ID 的标题不会被视为 Org-roam 节点。组织 ID 可以通过交互式命令添
  加到文件或标题中 ``M-x org-id-get-create``.

1.6.2 设置 Org-roam
^^^^^^^^^^^^^^^^^^^

Org-roam 的功能源于其积极的缓存:它抓取 ``org-roam-directory`` 内的所有
文件,并维护所有链接和节点的缓存.

也就是说要开始使用 Org-roam，请选择一个位置来存储 Org-roam 文件。将包
含您的笔记的目录由变量指定 org-roam-directory。Org-roam 在内部递归搜索
org-roam-directory 笔记。这个变量需要在任何调用 Org-roam 函数之前设置。

运行 ``org-roam-db-build-cache`` 会构建缓存.

1.6.3 创建和链接节点
^^^^^^^^^^^^^^^^^^^^

Org-roam 可以轻松创建笔记并将它们链接在一起。创建节点有两个主要功能:

- org-roam-node-insert: 如果节点不存在，则创建一个节点，并在该点插入一个指向该节点的链接。

- org-roam-node-find: 如果不存在则创建一个节点，并访问该节点。

- org-roam-capture: 如果节点不存在则创建一个节点，完成后恢复当前窗口配置。

我们先试试org-roam-node-find。调用M-x org-roam-node-find将显示驻留在
org-roam-directory. 它现在应该什么都不显示，因为目录中没有注释。输入您
要创建的笔记的标题，然后按RET。这开始了笔记创建过程。此过程使用
org-capture的模板系统，并且可以自定义(请参阅模板系统)。使用默认模板，
按 C-c C-c完成笔记捕获。

现在我们有了一个节点，我们可以尝试使用M-x org-roam-node-insert.

这将显示节点列表，其中应包含您刚刚创建的节点。选择节点将插入id: 到该节
点的链接。如果您输入了一个不存在的标题，您将再次进入节点创建过程。

1.7 自定义节点缓存
~~~~~~~~~~~~~~~~~~

1.7.1 缓存什么?
^^^^^^^^^^^^^^^

默认情况下,所有节点(任何带有 ID 的标题或文件)都由 Org-roam 缓存。在某
些情况下,您可能希望拥有带有 ID 的标题，但又不想让 Org-roam 缓存它们。

要从 Org-roam 数据库中排除标题,请将 ``ROAM_EXCLUDE`` 属性设置为非 nil 值.
例如:

.. code:: org

    * Foo
      :PROPERTIES:
      :ID:       foo
      :ROAM_EXCLUDE: t
      :END:

注意一旦添加类此标志,就会不被缓存,在运行
``org-roam-buffer-toggle-display`` 的时候,会忽视此节点

1.7.2 何时缓存
^^^^^^^^^^^^^^

默认情况下，Org-roam 是急切的缓存:每次修改和保存 Org-roam 文件时，它
都会更新相应文件的数据库。这使数据库保持最新，在使用交互式命令时不会引
起任何意外。

但是，根据您的 Org 文件的大小，数据库更新可能是一个缓慢的操作。您可以
通过设置org-roam-db-update-on-save为来禁用数据库的自动更新nil。

变量:org-roam-db-update-on-save

如果是 t，则在保存文件时更新 Org-roam 数据库。如果您的文件很大并且更新
数据库很慢，请禁用此选项。

1.8 Org Roam 缓冲区
~~~~~~~~~~~~~~~~~~~

Org-roam 提供 Org-roam 缓冲区:一个用于查看与其他笔记(反向链接、参考链
接、未链接的参考等)关系的界面。这里有两个主要命令可以使用:

- ``org-roam-buffer-toggle-display``: 启动一个 Org-roam 缓冲区来跟踪当前
  所在的节点。这意味着缓冲区的内容会随着点的移动而变化(如有必要)。

- ``org-roam-buffer-display-dedicated``: 在不访问其文件的情况下为特定节
  点启动 Org-roam 缓冲区。与org-roam-buffer-toggle您可以有多个这样的缓
  冲区不同，它们的内容不会自动替换为新节点。

要调出跟踪当前节点的缓冲区，请调用M-x org-roam-buffer-toggle。

功能:org-roam-buffer-toggle

切换org-roam-buffer.

要调出专用于特定节点的缓冲区，请调用 ``M-x org-roam-buffer-display-dedicated``

功能: ``org-roam-buffer-display-dedicated`` 在不访问节点本身的情况下启动
节点专用的 Org-roam 缓冲区。
