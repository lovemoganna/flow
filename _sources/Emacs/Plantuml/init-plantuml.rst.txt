=============
Plantuml Mode
=============

    :Author: Derek Feichtinger
    :Date: <2021-05-07 Fri 10:11>



1 Links
-------

- Homepage:  `http://plantuml.com/ <http://plantuml.com/>`_

- Downloads:  `http://plantuml.sourceforge.net/ <http://plantuml.sourceforge.net/>`_

- Source code: `https://github.com/plantuml/plantuml <https://github.com/plantuml/plantuml>`_

- Language Reference: `http://plantuml.com/PlantUML_Language_Reference_Guide.pdf <http://plantuml.com/PlantUML_Language_Reference_Guide.pdf>`_

- Page Link: `https://raw.githubusercontent.com/dfeich/org-babel-examples/master/plantuml/plantuml-babel.org <https://raw.githubusercontent.com/dfeich/org-babel-examples/master/plantuml/plantuml-babel.org>`_

2 Information on the local installation
---------------------------------------

::

    Emacs version: GNU Emacs 27.2 (build 1, x86_64-w64-mingw32)
     of 2021-03-26
    org version: 9.4.4

2.1 Help text
~~~~~~~~~~~~~

.. code:: sh

    java -jar "$jpath" -help

3 simple test
-------------

.. code:: plantuml

    @startuml
    ' this is a comment
    Alice -> Bob: Authentication Request
    Bob --> Alice: Authentication Response
    John --> Alice: another Authentication Request
    Alice --> John: another Authentication Response
    @enduml

.. image:: fig/sequence1.png

4 Diagram type examples
-----------------------

4.1 sequence diagrams
~~~~~~~~~~~~~~~~~~~~~

Note: The ``skin`` parameter I used in the earlier versions of this document is no longer supported by plantuml.

.. code:: plantuml

    @startuml
    title Example Sequence Diagram
    activate Client
    	Client -> Server: Session Initiation
    	note right: Client requests new session
    	activate Server
    		Client <-- Server: Authorization Request
    		note left: Server requires authentication
    		Client -> Server: Authorization Response
    		note right: Client provides authentication details
    		Server --> Client: Session Token
    		note left: Session established
    	deactivate Server
    	Client -> Client: Saves token
    deactivate Client
    @enduml

.. image:: fig/sequence2.png



.. code:: plantuml

    @startuml
    actor User
    participant "First Class" as A
    participant "Second Class" as B
    participant "Last Class" as C


    User -> A: DoWork
    activate A

    	A -> B: << createRequest >>
    	activate B

    		B -> C: DoWork
    		activate C
    			C --> B: WorkDone
    			destroy C

    			B --> A: Request <u>Created</u>
    		deactivate B

    		A --> User: Done
    	deactivate A
    	@enduml

.. image:: fig/sequence3.png




.. code:: plantuml

    left to right direction
    actor remoteUser
    actor service
    rectangle Gateway {
    	remoteUser -- (connect camera)
    	(connect camera) -- service
    	remoteUser -- (console)
    	(console) -- service
    }

.. image:: fig/sequence4.png

4.2 old style activity diagrams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: plantuml

    title Example Activity Diagram
    note right: Example Function
    (*)--> "Step 1"
    --> "Step 2"
    -> "Step 3"
    --> "Step 4"
    --> === STARTLOOP ===
    note top: For each element in the array
    if "Are we done?" then
    	-> [no] "Do this"
    	-> "Do that"
    	note bottom: Important note\ngoes here
    	-up-> "Increment counters"
    	--> === STARTLOOP ===
    else
    	--> [yes] === ENDLOOP ===
    endif
    --> "Last Step"
    --> (*)

.. image:: fig/activity1.png


.. code:: plantuml

    title Servlet Container

    (*) --> "ClickServlet.handleRequest()"
    --> "new Page"

    if "Page.onSecurityCheck" then
    	->[true] "Page.onInit()"

    	if "isForward?" then
    		->[no] "Process controls"

    		if "continue processing?" then
    			-->[yes] ===RENDERING===
    		else
    			-->[no] ===REDIRECT_CHECK===
    		endif

    	else
    		-->[yes] ===RENDERING===
    	endif

    	if "is Post?" then
    		-->[yes] "Page.onPost()"
    		--> "Page.onRender()" as render
    		--> ===REDIRECT_CHECK===
    	else
    		-->[no] "Page.onGet()"
    		--> render
    	endif

    else
    	-->[false] ===REDIRECT_CHECK===
    endif

    if "Do redirect?" then
    	->[yes] "redirect request"
    	--> ==BEFORE_DESTROY===
    else
    	if "Do Forward?" then
    		-left->[yes] "Forward request"
    		--> ==BEFORE_DESTROY===
    	else
    		-right->[no] "Render page template"
    		--> ==BEFORE_DESTROY===
    	endif
    endif

    --> "Page.onDestroy()"
    -->(*)

.. image:: fig/activity2.png

4.3 new style activity diagrams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `http://plantuml.sourceforge.net/activity2.html <http://plantuml.sourceforge.net/activity2.html>`_

4.4 swimlanes
~~~~~~~~~~~~~

Swimlanes actually are activity diagrams using the new syntax.

.. code:: plantuml

    @startuml
    |Swimlane1|
    start
    :foo1;
    |#AntiqueWhite|Swimlane2|
    :foo2;
    :foo3;
    |Swimlane1|
    :foo4;
    |Swimlane2|
    :foo5;
    stop
    @enduml

.. image:: fig/swimlane1.png

5 Class diagrams
----------------

`http://plantuml.sourceforge.net/classes.html <http://plantuml.sourceforge.net/classes.html>`_

.. code:: plantuml

    class Proposal {
    	also called a "study"
    	..
    	ProposalID
    	Proposer
    	PrincipalInvestigator
    }

    class Visit << (V,#Ff8c00) >> {
    	has a 1:1 mapping to a
    	single user. Also used to
    	reserve badges.
    	..
    	Username
    	starttime
    	endtime
    	proposalID
    	beamline
    }

    note left: why is Visit linked\nto a single beamline?

    class Shift {
    	ProposalID
    	starttime
    	endtime
    	contactPerson
    }

    Proposal *-- Shift
    Proposal *-- Visit

.. image:: fig/class1.png

6 Component diagrams
--------------------

.. code:: plantuml

    @startuml

    package "Some Group" {
    	HTTP - [First Component]
    	[Another Component]
    }

    node "Other Groups" {
    	FTP - [Second Component]
    	[First Component] --> FTP
    }

    cloud {
    	[Example 1]
    }


    database "MySql" {
    	folder "This is my folder" {
    		[Folder 3]
    	}
    	frame "Foo" {
    		[Frame 4]
    	}
    }


    [Another Component] --> [Example 1]
    [Example 1] --> [Folder 3]
    [Folder 3] --> [Frame 4]

    @enduml

.. image:: fig/component1.png

The next example was posted by Cecil Westerhof on emacs-orgmode.gnu.org mailing list [2019-10-18 Fri]

.. code:: plantuml

    @startuml

    component [Producer 1\nProducer 2\nProducer ...\nProducer n] as Producers

    cloud {
    	[Internet] as Internet1
    }

    node RabbitMQ #LightSteelBlue {
    	[Exchange]
    	[Queue 1\nQueue 2\nQueue ...\nQueue n] as Queues
    }

    cloud {
    	[Internet] as Internet2
    }

    [Consumer 1\nConsumer 2\nConsumer ...\nConsumer n] as Consumers


    [Producers] -> [Internet1]  : Publish
    [Internet1] -> [Exchange]   : Publish
    [Exchange]  -> [Queues]     : Route
    [Queues]    -> [Internet2]  : Consume
    [Internet2] -> [Consumers]  : Consume

    @enduml

.. image:: fig/component2.png

7 Mindmaps
----------

- [2019-07-21 Sun]  Needs plantuml-1.2019.08 or newer. Still in testing and features may change

- `http://plantuml.com/mindmap-diagram <http://plantuml.com/mindmap-diagram>`_

- Nice Link about mindmaps in PlantUML: `http://hangaroundtheweb.com/2019/07/mind-maps-in-spacemacs/ <http://hangaroundtheweb.com/2019/07/mind-maps-in-spacemacs/>`_

  The examples are taken from the official plantuml page.

  This syntax looks like the most versatile and useful to me

  - Leading "+/-" specify hierarchy level and whether the node is on the right or left of the central
    node.

  - Undescores directly following the leading position characters prevent the creation of a box around an item.

.. code:: plantuml

    @startmindmap
    + OS
    ++ Ubuntu
    +++_ Linux Mint
    +++_ Kubuntu
    +++_ Lubuntu
    +++_ KDE Neon
    ++ LMDE
    ++ SolydXK
    ++ SteamOS
    ++ Raspbian
    -- Windows 95
    -- Windows 98
    -- Windows NT
    ---_ Windows 8
    ---_ Windows 10
    @endmindmap

.. image:: fig/mindmap1.png


A mindmap based on org mode syntax. Note that the org headline asterisks need to be escaped by "," inside
of a source block. It's nice that they allow for an org mode syntax, but I think this is less convenient
to write and work with. The org headlines do not allow for text following them (syntax error).

.. code:: plantuml

    @startmindmap
    * Debian
    ** Ubuntu
    *** Linux Mint
    *** Kubuntu
    *** Lubuntu
    *** KDE Neon
    ** LMDE
    ** SolydXK
    ** SteamOS
    ** Raspbian with a very long name
    *** <s>Raspmbc</s> => OSMC
    *** <s>Raspyfi</s> => Volumio
    @endmindmap

.. image:: fig/mindmap2.png

.. code:: plantuml

    @startmindmap
    caption figure 1
    title My super title

    * <&flag>Debian
    ** <&globe>Ubuntu
    *** Linux Mint
    *** Kubuntu
    *** Lubuntu
    *** KDE Neon
    ** <&graph>LMDE
    ** <&pulse>SolydXK
    ** <&people>SteamOS
    ** <&star>Raspbian with a very long name
    *** <s>Raspmbc</s> => OSMC
    *** <s>Raspyfi</s> => Volumio

    header
    My super header
    endheader

    center footer My super footer

    legend right
    Short
    legend
    endlegend
    @endmindmap

.. image:: fig/mindmap3.png

8 skinparam
-----------

8.1 Gradients
~~~~~~~~~~~~~

Minimally adapted from `https://blog.jdriven.com/2017/10/plantuml-pleasantness-use-gradients-diagrams/ <https://blog.jdriven.com/2017/10/plantuml-pleasantness-use-gradients-diagrams/>`_

.. code:: plantuml

    @startuml

    title Gradient

    skinparam defaultTextAlignment center
    skinparam RectangleFontSize 20

    skinparam TitleFontStyle bold
    skinparam TitleFontColor #e723e7

    ' Define two colors for a gradient of the background
    ' and use "-" to define that the gradient goes from top to bottom.
    skinparam BackgroundColor  #000000-#afafaf

    ' Define two colors for a default background gradient of Rectangles
    ' and use / for top left to bottom right.
    skinparam RectangleBackgroundColor #ffd200/#8cfcff

    rectangle A [
    From top left
    to bottom right
    <&fullscreen-enter>
    ]

    ' Use "\" for bottom left to top right
    rectangle B #ffd200\8cfcff [
    From bottom left
    to top right
    <&resize-both>
    ]

    ' Use "|" for left to right
    rectangle C #ffd200|8cfcff [
    From left
    to right
    <&resize-width>
    ]

    ' Use "-" for top to bottom
    rectangle D #ffd200-8cfcff [
    From top
    to bottom
    <&resize-height>
    ]

    @enduml

.. image:: fig/gradients1.png

9 Scaling
---------

.. code:: plantuml

    @startuml
    scale 2

    Alice -> Bob: Authentication Request
    Bob --> Alice: Authentication Response
    John --> Alice: another Authentication Request
    Alice --> John: another Authentication Response
    @enduml

.. image:: fig/scale-sequence1.png

10 TODO using SVG graphics
--------------------------

The *svg* package uses inkscape to separate the text and graphical
elements of the SVG into a Tex file (\*.pdf\ :sub:`tex`\) and a PDF file
containig the graph elements.  E.g. svg-sequence1.svg into
svg-sequence1.pdf\ :sub:`tex`\ and svg-sequence1.pdf.

Currently, SVG pictures can only be rendered correctly, **if the picture is in the same directory** as the tex source file (and
therefore also the org source file).

Note: with the current org version 9.1.14 and Emacs 26.1 the SVG is
not correctly displayed in the org buffer, but the SVG renders fine in
the exported Latex PDF.

.. code:: plantuml

    @startuml
    ' this is a comment
    Alice -> Bob: Authentication Request
    Bob --> Alice: Authentication Response
    John --> Alice: another Authentication Request
    Alice --> John: another Authentication Response
    @enduml

.. image:: svg-sequence1.svg
